name: GitHub All Events to Discord

on:
    push:
    pull_request:
    issues:
        types: [opened, edited, closed] # Issue 생성·수정·닫힘
    issue_comment:
    create: # 브랜치 혹은 태그 생성
    delete:
    release:
        types: [published, created]
    workflow_run:
        workflows: ["*"]
        types: [completed]

jobs:
    discordNotification:
        runs-on: ubuntu-latest
        steps:
            - name: Send message to Discord
              env:
                  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
              run: |
                  # 이벤트 기본 정보
                  EVENT_TYPE="${{ github.event_name }}"
                  ACTION="${{ github.event.action }}"
                  REPO_NAME="${{ github.repository }}"
                  REF_FULL="${{ github.ref }}"
                  BRANCH_NAME="${REF_FULL#refs/heads/}"
                  ACTOR="${{ github.actor }}"

                  # 공통 메시지 헤더
                  MESSAGE="📢 **GitHub 이벤트 발생**
                    🔔 이벤트 타입: ${EVENT_TYPE}${ACTION:+ (${ACTION})}
                    📌 레포지토리: ${REPO_NAME}
                    🌿 브랜치: ${BRANCH_NAME}
                    👤 실행자: ${ACTOR}"

                  # 1) push 이벤트 처리 (기존 로직 유지)
                  if [[ "$EVENT_TYPE" == "push" ]]; then
                    COMMIT_LIST=""
                    COMMITS_JSON=$(echo '${{ toJson(github.event.commits) }}' | jq -c '.')
                    while IFS= read -r commit; do
                      MSG=$(echo "$commit" | jq -r '.message')
                      URL=$(echo "$commit" | jq -r '.url')
                      AUTHOR=$(echo "$commit" | jq -r '.author.name')
                      COMMIT_LIST="${COMMIT_LIST}\n📝 ${MSG} - 👤 ${AUTHOR}\n🔗 [커밋 보기](${URL})"
                    done < <(echo "$COMMITS_JSON" | jq -c '.[]')
                    [[ -n "$COMMIT_LIST" ]] \
                      && MESSAGE="$MESSAGE\n\n🔄 **푸시된 커밋 목록:**$COMMIT_LIST" \
                      || MESSAGE="$MESSAGE\n\n🔄 **푸시된 커밋이 없습니다.**"

                  # 2) pull_request 이벤트 처리 (기존 로직 유지)
                  elif [[ "$EVENT_TYPE" == "pull_request" ]]; then
                    PR_TITLE="${{ github.event.pull_request.title }}"
                    PR_URL="${{ github.event.pull_request.html_url }}"
                    PR_STATE="${{ github.event.pull_request.state }}"
                    PR_AUTHOR="${{ github.event.pull_request.user.login }}"
                    MESSAGE="$MESSAGE

                    🔀 **Pull Request ${PR_STATE^}**
                    • 제목: ${PR_TITLE}
                    • 작성자: ${PR_AUTHOR}
                    🔗 [PR 보기](${PR_URL})"

                  # 3) issues 이벤트 처리 (이슈 생성·수정·닫힘)
                  elif [[ "$EVENT_TYPE" == "issues" ]]; then
                    ISSUE_TITLE="${{ github.event.issue.title }}"
                    ISSUE_URL="${{ github.event.issue.html_url }}"
                    ISSUE_AUTHOR="${{ github.event.issue.user.login }}"
                    MESSAGE="$MESSAGE

                    🐛 **Issue ${ACTION^}**
                    • 제목: ${ISSUE_TITLE}
                    • 작성자: ${ISSUE_AUTHOR}
                    🔗 [Issue 보기](${ISSUE_URL})"

                  # 4) create 이벤트 처리 (브랜치·태그 생성)
                  elif [[ "$EVENT_TYPE" == "create" ]]; then
                    REF_TYPE="${{ github.event.ref_type }}"   # branch or tag
                    REF_NAME="${{ github.event.ref }}"
                    if [[ "$REF_TYPE" == "branch" ]]; then
                      MESSAGE="$MESSAGE

                    🌱 **브랜치 생성**: ${REF_NAME}"
                    else
                    MESSAGE="$MESSAGE

                    🏷️ **태그 생성**: ${REF_NAME}"
                    fi
                  fi

                  # Discord용 페이로드 생성 및 전송
                  PAYLOAD=$(jq -n \
                    --arg username "GitHub Webhook" \
                    --arg content "$(echo -e "$MESSAGE")" \
                    '{username: $username, content: $content}')
                  curl -H "Content-Type: application/json" \
                       -X POST \
                       -d "$PAYLOAD" \
                       "$DISCORD_WEBHOOK_URL"
